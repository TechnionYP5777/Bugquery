<?xml version="1.0" encoding="UTF-8"?>
<exceptionlist>
<type id="NullPointerException">Exception in thread "main" java.lang.NullPointerException\n    at AnotherClassLoader.loadClass(test.java:58)\n    at test.main(test.java:30)\n    at Main.main(Main.java:68)</type>
<type id="NumberFormatException">java.lang.NumberFormatException: For input string: "N/A"\n    at java.lang.NumberFormatException.forInputString(Unknown Source)\n    at java.lang.Integer.parseInt(Unknown Source)\n    at java.lang.Integer.valueOf(Unknown Source)\n    at java.util.TreeMap.compare(Unknown Source)\n    at java.util.TreeMap.put(Unknown Source)\n    at java.util.TreeSet.add(Unknown Source)</type>
<type id="IllegalArgumentException">Exception in thread "main" java.lang.IllegalArgumentException: URI has a fragment component\n    at sun.nio.fs.UnixUriUtils.fromUri(UnixUriUtils.java:55)\n    at sun.nio.fs.UnixFileSystemProvider.getPath(UnixFileSystemProvider.java:98)\n    at java.nio.file.Paths.get(Paths.java:138)</type>
<type id="RuntimeException">java.lang.RuntimeException: An error occured while executing doInBackground()\n            at android.os.AsyncTask$3.done(AsyncTask.java:300)\n            at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:355)\n            at java.util.concurrent.FutureTask.setException(FutureTask.java:222)\n            at java.util.concurrent.FutureTask.run(FutureTask.java:242)\n            at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n            at java.lang.Thread.run(Thread.java:841)</type>
<type id="IllegalStateException">Exception in thread "main" java.lang.IllegalStateException: stream has already been operated upon or closed\n    at java.util.stream.AbstractPipeline.&lt;init&gt;(Unknown Source)\n    at java.util.stream.ReferencePipeline.&lt;init&gt;(Unknown Source)\n    at java.util.stream.ReferencePipeline$StatelessOp.&lt;init&gt;(Unknown Source)\n    at java.util.stream.ReferencePipeline$2.&lt;init&gt;(Unknown Source)\n    at java.util.stream.ReferencePipeline.filter(Unknown Source)\n    at StreamExp.main(StreamExp.java:13)</type>
</exceptionlist>